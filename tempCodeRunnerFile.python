# Transform an audio from a YouTube video to text script with language detection and multiple output formats
# Author: Javed Ali (www.javedali.net)

# import required modules
import os

import whisper
from pytube import YouTube
from langdetect import detect
import webvtt
import srt


# Function to open a file
def startfile(fn):
    os.system('open %s' % fn)


# Function to create and open a txt file
def create_and_open_txt(text, filename):
    # Create and write the text to a txt file
    with open(filename, "w") as file:
        file.write(text)
    startfile(filename)


# Function to convert and save transcription as WebVTT
def save_webvtt(transcription, filename):
    vtt = webvtt.from_transcription(transcription)
    vtt.save(filename)
    startfile(filename)


# Function to convert and save transcription as SubRip
def save_srt(transcription, filename):
    subrip = srt.from_transcription(transcription)
    subrip.save(filename)
    startfile(filename)


# Ask user for the YouTube video URL
url = input("Enter the YouTube video URL: ")

# Create a YouTube object from the URL
yt = YouTube(url)

# Get the audio stream
audio_stream = yt.streams.filter(only_audio=True).first()

# Download the audio stream
output_path = "YoutubeAudios"
filename = "audio.mp3"
audio_stream.download(output_path=output_path, filename=filename)

print(f"Audio downloaded to {output_path}/{filename}")

# Load the base model and transcribe the audio
model = whisper.load_model("base")
result = model.transcribe("YoutubeAudios/audio.mp3")
transcribed_text = result["text"]
print(transcribed_text)

# Detect the language
language = detect(transcribed_text)
print(f"Detected language: {language}")

# Choose the output format
output_format = input("Choose the output format (txt, srt, vtt): ")

# Save the transcription in the chosen format
if output_format == "txt":
    create_and_open_txt(transcribed_text, f"output_{language}.txt")
elif output_format == "srt":
    save_srt(transcribed_text, f"output_{language}.srt")
elif output_format == "vtt":
    save_webvtt(transcribed_text, f"output_{language}.vtt")
else:
    print("Invalid output format. Please choose 'txt', 'srt', or 'vtt'.")
